/**
 * @package Live
 */

/*
 * Match selector
 */
@function selector-match($val) {

	$attr: str-slice($val, 1, 1);
	@if $attr == "#" {
		$attr: id;
	}
	@else if $attr == "." {
		$attr: class;
	}
	@else {
		@error "Unknown selector type `#{$val}`.";
	}

	$val: str-slice($val, 2);

	@return '[#{$attr}^="#{$val}"]', '[#{$attr}*=" #{$val}"]';

}

@function selector-not-match($val) {

	$output: "";

	@each $selector in selector-match($val) {
		$output: $output + ":not(#{$selector})";
	}

	@return $output;

}

/*
 * Next map key
 */
@function map-next-key($map, $key) {

	$keys: map-keys($map);

	$pos: index($keys, $key);
	@if $pos == null {
		@return null;
	}

	$pos: $pos+1;
	@if $pos > length($keys) {
		@return null;
	}

	@return nth($keys, $pos);

}

/*
 * Device
 */
@function device($val) {

	$selector: "html";

	@each $device in $val {
		@if index($devices, $device) != null {
			$selector: $selector + "." + $val;
		}
	}

	@return $selector;

}

/*
 * Breakpoint
 */
@function breakpoint($val) {

	$size: nth($val, 1);
	@if not map-has-key($breakpoints, $size) {
		@error "Unknown size `#{$val}`.";
	}

	$size-next: map-next-key($breakpoints, $size);

	$width: map-get($breakpoints, $size);
	$width-next: map-get($breakpoints, $size-next);

	$dir: if(length($val) >= 2, nth($val, 2), up);

	@if $dir == up {
		@return if($width > 0, "(min-width: #{$width})", "");
	}
	@else if $dir == down {
		@return if($width-next != null, "(max-width: #{($width-next - 1px)})", "");
	}
	@else {
		$up: breakpoint($size up);
		$down: breakpoint($size down);
		@return if($up != "" and $down != "", "#{$up} and #{$down}", $up+$down);
	}

}

/*
 * Lightness
 */
@function lightness($color) {

	$r: red(rgba($color, 1));
	$g: green(rgba($color, 1));
	$b: blue(rgba($color, 1));

	@return ($r*0.2126 + $g*0.7152 + $b*0.0722) / 255;

}

/*
 * Complementary color
 */
@function complementary-color($color, $dark-color: #000, $bright-color: #fff) {
	@return if(lightness($color) > 0.65, $dark-color, $bright-color);
}

/*
 * Common element
 */
@mixin common-block {
	@include margin(rem(30) null);
}

@mixin common-text {
	@include margin(1.25em null);
}

/*
 * Link
 */
@mixin link-inherit {

	color: inherit;

	&:hover {
		text-decoration: none;
	}

}

@mixin link-reverse {

	@include link-inherit;

	&:hover {
		color: $link-color;
	}

}

/*
 * Width
 */
@mixin width-full {
	box-sizing: border-box;
	width: 100%;
}

/*
 * Border
 */
@mixin border-circled {
	border-radius: 50%;
	overflow: hidden;
}

@mixin border-margin($vals, $color: transparent) {

	@include directional-property(border, width, $vals);

	border: {
		color: $color;
		style: solid;
	}

}

/*
 * Hover
 */
@mixin hover-grayscale {

	img {
		@include filter(grayscale(100%));
		transition: filter 0.2s;
	}

	&:hover img {
		@include filter(grayscale(0));
	}

}

@mixin hover-zoom($scale: 1.05) {

	img {
		transition: box-shadow 0.15s, transform 0.15s;
		position: relative;
	}

	&:hover img {
		@include transform(scale($scale));
		box-shadow: 0 0 rem(10) $hover-zoom-shadow;
		z-index: 1;
	}

}

@mixin hover-flash {

	@include keyframes(flash) {
		0% { opacity: 0; }
		5% { opacity: 0.7; }
		100% { opacity: 0; }
	}

	position: relative;

	&:after {

		@include position(absolute, 0 0 0 0);

		content: "";
		background: $hover-flash-color;
		opacity: 0;

	}

	&:hover:after {
		@include animation(flash 0.4s);
	}

}

@mixin hover-slide {

	overflow: hidden;

	> span {

		transition: transform 0.2s;
		display: block;
		position: relative;
		height: 100%;

		&:after {
			@include position(absolute, 100% 0 null);
			content: attr(data-hover);
			text-align: center;
			height: 100%;
			overflow: hidden;
		}

	}

	&:not(:disabled):not(.disabled):hover > span {
		transform: translateY(-100%);
	}

}

/*
 * Margin fix
 */
@mixin marginfix($val: 0) {

	&:first-child {
		margin-top: $val;
	}

	&:last-child {
		margin-bottom: $val;
	}

}

/*
 * Collapse margins
 */
@mixin collapse-margins($val) {

	$top: nth($val, 1);
	$bottom: if(length($val) >= 2, nth($val, 2), $top);

	@if $top > 0 {
		&:before {
			@include margin(-$top null $top);
			content: "";
			display: block;
		}
	}

	@if $bottom > 0 {
		&:after {
			@include margin(-$bottom null $bottom);
			content: "";
			display: block;
		}
	}

}

/*
 * Font
 */
@mixin font($name, $val: null) {

	@if str-slice(inspect(nth(&, 1)), 1, 1) != "%" {

		@if not global-variable-exists(_fonts) {
			$_fonts: () !global;
		}

		$selector: ();
		@each $_ in & {
			$selector: append($selector, quote(inspect($_)));
		}

		$fonts: if(map-has-key($_fonts, $name), map-get($_fonts, $name), ());
		$fonts: join($fonts, $selector, comma);

		$_fonts: map-merge($_fonts, ($name: $fonts)) !global;

	}

	@if $val {

		@if length($val) >= 2 {
			line-height: nth($val, 2);
		}

		@if length($val) >= 1 {
			font-size: nth($val, 1);
		}

	}

}

@mixin font-extend($name) {
	@include font($name);
}

/*
 * Device
 */
@mixin device($val) {

	#{device($val)} & {
		@content;
	}

}

/*
 * Breakpoint
 */
@mixin breakpoint($val) {

	$media: breakpoint($val);

	@if $media == "" {
		@content;
	}
	@else {
		@media screen and #{$media} {
			@content;
		}
	}

}

/*
 * Break inside
 */
@mixin break-inside($val: auto) {

	page-break-inside: $val;
	break-inside: $val;

	-webkit-column-break-inside: $val;

}

/*
 * In columns
 */
@mixin in-columns {

	@at-root #{selector-nest(".flex-columns", selector-match(".cell-"), ">", &)},
	.text-columns > &,
	.columns .cell > & {
		@content;
	}

}

/*
 * SVG background
 *
 * @see http://w3stack.org/question/url-or-base64-encode-strings-in-compasssass/
 */
@mixin svg-background($svg, $properties: null) {

	@if function-exists(base64) {
		background: url("data:image/svg+xml;base64,#{base64($svg)}") $properties;
	}
	@else {
		background: url("data:image/svg+xml;utf8,#{$svg}") $properties;
	}

}

/*
 * Browser
 */
@mixin browser($val) {

	@if $val == moz {
		@-moz-document url-prefix() {
			@content;
		}
	}
	@else if $val == webkit {
		@media screen and (-webkit-min-device-pixel-ratio: 0) {
			@content;
		}
	}
	@else {
		@warning "Unsupported browser `#{$val}`.";
	}
}

/*
 * Force 3D
 */
@mixin force3d {
	@include transform(translate3d(0, 0, 0));
}

/*
 * Match
 */
@mixin match($val) {
	@at-root #{selector-append(&, selector-match($val))} {
		@content;
	}
}

@mixin not-match($val) {
	@at-root #{selector-append(&, selector-not-match($val))} {
		@content;
	}
}

/*
 * Replace
 */
@mixin replace($original, $replacement) {
	@at-root #{selector-replace(&, $original, $replacement)} {
		@content;
	}
}

/*
 * Width
 */
.width {

	&-min {
		width: 1%;
	}

	&-full {
		@include width-full;
	}

	&-over {
		// declaration
	}

}

/*
 * Align
 */
.align {

	&-left {
		@include breakpoint(medium) {
			float: left;
		}
	}

	&-right {
		@include breakpoint(medium) {
			float: right;
		}
	}

	&-center {
		@include margin(null auto);
	}

}

.text-align {

	&-left {
		text-align: left;
	}

	&-right {
		text-align: right;
	}

	&-center {
		text-align: center;
	}

}

/*
 * Border
 */
.border {

	&-circled {
		@include border-circled;
	}

}

/*
 * Hover
 */
.hover {

	&-grayscale {
		@include hover-grayscale;
	}

	&-zoom {
		@include hover-zoom;
	}

}

/*
 * Media
 */
@each $breakpoint in map-keys($breakpoints) {

	@include breakpoint($breakpoint) {

		@each $display in none, inline, inline-block, block {
			.media-#{$breakpoint}-#{$display} {

				display: $display;

				&-important {
					display: $display !important;
				}

			}
		}

	}

}